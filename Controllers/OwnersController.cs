using DogGo.Models;
using DogGo.Models.ViewModels;
using DogGo.Repositories;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace DogGo.Controllers
{
    public class OwnersController : Controller
    {
        private readonly IOwnerRepository _ownerRepo;
        private readonly IDogRepository _dogRepo;
        private readonly IWalkerRepository _walkerRepo;
        private readonly INeighborhoodRepository _neighborhoodRepo;

        // Constructor / ASP.NET will give us an instance of our Walker Repository when creating an instance of WalkersController. This is called "Dependency Injection"
        public OwnersController(
            IOwnerRepository ownerRepository,
            IDogRepository dogRepository,
            IWalkerRepository walkerRepository,
            INeighborhoodRepository neighborhoodRepository)
        {
            _ownerRepo = ownerRepository;
            _dogRepo = dogRepository;
            _walkerRepo = walkerRepository;
            _neighborhoodRepo = neighborhoodRepository;
        }

      
        // GET: OwnerController
        public ActionResult Index()
        {
            List<Owner> ownersList = _ownerRepo.GetAllOwners();

            return View(ownersList);
        }

        /*----------------------------------------------------------------------------------------------*/
        //Part 1, Chapter 3

        // GET: OwnerController/Details/5
        //public ActionResult Details(int id)
        //{

        //    Owner owner = _ownerRepo.GetOwnerById(id);
        //    if (owner == null)
        //    {
        //        return NotFound();
        //    }
        //    return View(owner);
        //}
        /*----------------------------------------------------------------------------------------------*/

        // GET: Owners/Details/5
        public ActionResult Details(int id)
        {
            Owner owner = _ownerRepo.GetOwnerById(id);
            List<Dog> dogList = _dogRepo.GetDogsByOwnerId(owner.Id);
            List<Walker> walkerList = _walkerRepo.GetWalkersInNeighborhood(owner.NeighborhoodId);

            ProfileViewModel vm = new ProfileViewModel()
            {
                Owner = owner,
                Dogs = dogList,
                Walkers = walkerList
            };

            return View(vm);
        }

        // GET request:  action simply returns a View. Adequate: server's task is to provide the user with a blank HTML form
        [HttpGet]//Specified the HTTP attributes ([HttpGet] and [HttpPost])=> make sure correct method invoked based on the request type since have 2 method with name create.
        [Route("owners/create")]
        public ActionResult Create()
        {
            List<Neighborhood> neighborhoods = _neighborhoodRepo.GetAll();

            OwnerFormViewModel vm = new OwnerFormViewModel()
            {
                Owner = new Owner(),
                Neighborhoods = neighborhoods
            };

            return View(vm);
        }

        // POST request: OwnerController/Create

        //[HttpPost] attribute specifies that this method  handle HTTP POST requests.triggered when form is submitted to the URL corresponding to the action's route ("Owners/Create")

        //[ValidateAntiForgeryToken] attribute:  security measure to prevent cross-site request forgery (CSRF) attacks.Ensures request includes a valid anti-forgery token generated by the server.

        //method takes an Owner object as a parameter(represents the data submitted from the form) ASP framework will automatically bind the form data to the owner object based on the input field names matching the object's properties.
        [HttpPost] 
        [ValidateAntiForgeryToken]
        [Route("owners/create")] //To resolve  "AmbiguousMatchException" error d/t conflicting route configurations or multiple routes with the same name app => used explicit route attributes to specify unique routes for each action.
        public ActionResult Create(Owner owner)
        {
            try
            {
                _ownerRepo.AddOwner(owner);

                /*ModelState.Clear();*/ // Clear model state to remove previous values after form submission

                //redirects the user to the "Index" action (list of owners) 
                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                //return the same "Create" view with the submitted form data
                return View(owner);
            }
        }

        //-------------------------------first part/Chapter 3------------------------------------
        //// GET:  controller will get an owner id from the url route (i.e /owner/edit/5)
        //public ActionResult Edit(int id)
        //{
        //    Owner owner = _ownerRepo.GetOwnerById(id);

        //    if (owner == null)
        //    {
        //        return NotFound();
        //    }

        //    return View(owner);
        //}

        //---------------------------------------------------------------------------------------------

        // GET:  Update the /owner/edit/{id} route to use the OwnerFormViewModel => Neighborhood Id uses a dropdown instead of an input. 
        public ActionResult Edit(int id)
        {

            List<Neighborhood> neighborhoods = _neighborhoodRepo.GetAll();
            Owner owner = _ownerRepo.GetOwnerById(id);

            if (owner == null)
            {
                return NotFound();
            }

            OwnerFormViewModel vm = new OwnerFormViewModel()
            {
                Owner = owner,
                Neighborhoods = neighborhoods
            };

            return View(vm);
        }





        // POST: Owners/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(int id, Owner owner)
        {
            try
            {
                _ownerRepo.UpdateOwner(owner);

                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                return View(owner);
            }
        }

        // GET Method: create a view that asks the user to confirm the deletion; get id value from the route. i.e. owners/delete/3  

        public ActionResult Delete(int id)
        {
            Owner owner = _ownerRepo.GetOwnerById(id);

            return View(owner);
        }

        // POST: If the user clicks the delete button, a POST request will be made to /owners/delete/3
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Delete(int id, Owner owner)
        {
            try
            {
                _ownerRepo.DeleteOwner(id);

                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                return View(owner);
            }
        }
    }
}
